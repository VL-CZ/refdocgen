@using RefDocGen.TemplateGenerators.Shared.TemplateModels.Menu
@inherits ComponentBase

@code {
    [Parameter]
    public required DelegateTypeTM Model { get; set; }

    [Parameter]
    public required TopMenuDataTM TopMenuData { get; set; }

    [Parameter]
    public required string[]? Versions { get; set; }

    /// <summary>
    /// Checks if the model has any (summary, remarks,...) doc comments.
    /// </summary>
    /// <returns>Boolean indicating whether the model is documented.</returns>
    private bool IsModelDocumented()
    {
        return Model.SummaryDocComment is not null || Model.RemarksDocComment is not null || Model.SeeAlsoDocComments.Any() || Model.TypeParameters.Any();
    }
}

<CascadingValue Value="TopMenuData">
    <CascadingValue Value="Versions">
        <LayoutView Layout="typeof(AppLayout)">
            <div data-id="declared-type-data">
                <DeclaredTypeName TypeName="@Model.Name" TypeKindName="delegate" Modifiers="@Model.Modifiers" TypeParameters="@Model.TypeParameters" />

                <TypeParametersConstraints TypeParameters="@Model.TypeParameters" />

                <NamespaceLink Namespace="@Model.Namespace" />

                <hr />

                <SummaryDoc DocComment="@Model.SummaryDocComment" />

                <TypeParameterDocs TypeParameters="@Model.TypeParameters" />

                <AttributeList Attributes="@Model.Attributes" />

                <RemarksDoc DocComment="@Model.RemarksDocComment" />

                <SeeAlsoDocs DocComments="@Model.SeeAlsoDocComments" />

                @if (IsModelDocumented())
                {
                    <hr />
                }
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="border p-2 mb-2" data-id="delegate-method" id="delegate-method">
                        <h6 class="mb-1" data-id="member-name">
                            <samp>
                                <span class="text-primary">@string.Join(' ', Model.Modifiers) delegate</span>

                                <TypeLink Type="@Model.ReturnType" />

                                <span>
                                    @Model.Name
                                </span><TypeParametersString TypeParameters="@Model.TypeParameters" /><ParametersString Parameters="@Model.Parameters" />
                            </samp>
                        </h6>

                        <SummaryDoc DocComment="@Model.SummaryDocComment" />

                        <ParameterDocs Parameters="@Model.Parameters" />

                        @if (!Model.ReturnsVoid)
                        {
                            <ReturnValueDoc DocComment="@Model.ReturnsDocComment" Type="@Model.ReturnType" />
                        }

                        <ExceptionDocs Exceptions="@Model.Exceptions" />

                        <SeeAlsoDocs DocComments="@Model.SeeAlsoDocComments" />
                    </div>
                </div>
            </div>
        </LayoutView>
    </CascadingValue>
</CascadingValue>
