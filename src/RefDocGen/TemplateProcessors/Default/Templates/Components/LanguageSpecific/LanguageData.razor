@using RefDocGen.TemplateProcessors.Default.Templates.Components.LanguageSpecific.CSharp
@using RefDocGen.TemplateProcessors.Default.Templates.Components.LanguageSpecific.Other
@using RefDocGen.TemplateProcessors.Shared.TemplateModels.Language
@using RefDocGen.TemplateProcessors.Shared.TemplateTools

@inherits ComponentBase

@code {

    [Parameter]
    public required object Parameter { get; set; }

    [Parameter]
    public required LanguageSpecificComponent Type { get; set; }

    [CascadingParameter]
    public required LanguageTM[] Languages { get; set; }

    private Dictionary<LanguageSpecificComponent, string> templateParameterNames = new()
        {
            [LanguageSpecificComponent.AttributeName] = "Attribute",
            [LanguageSpecificComponent.ConstructorName] = "Constructor",
            [LanguageSpecificComponent.DelegateMethodName] = "Delegate",
            [LanguageSpecificComponent.EnumMemberName] = "EnumMember",
            [LanguageSpecificComponent.EventName] = "Event",
            [LanguageSpecificComponent.FieldName] = "Field",
            [LanguageSpecificComponent.IndexerName] = "Indexer",
            [LanguageSpecificComponent.MethodName] = "Method",
            [LanguageSpecificComponent.OperatorName] = "Operator",
            [LanguageSpecificComponent.ParameterName] = "Parameter",
            [LanguageSpecificComponent.PropertyName] = "Property",
            [LanguageSpecificComponent.TypeDeclarationName] = "Type",
            [LanguageSpecificComponent.TypeParameterName] = "TypeParameter",
            [LanguageSpecificComponent.TypeParametersConstraintsSection] = "TypeParameters",
            [LanguageSpecificComponent.GenericTypeLink] = "Type",
        };
}

@{
    Dictionary<LanguageSpecificComponent, Type> csharpComponents = new()
            {
                [LanguageSpecificComponent.AttributeName] = typeof(CSharpAttributeName),
                [LanguageSpecificComponent.ConstructorName] = typeof(CSharpConstructorName),
                [LanguageSpecificComponent.DelegateMethodName] = typeof(CSharpDelegateMethodName),
                [LanguageSpecificComponent.EnumMemberName] = typeof(CSharpEnumMemberName),
                [LanguageSpecificComponent.EventName] = typeof(CSharpEventName),
                [LanguageSpecificComponent.FieldName] = typeof(CSharpFieldName),
                [LanguageSpecificComponent.IndexerName] = typeof(CSharpIndexerName),
                [LanguageSpecificComponent.MethodName] = typeof(CSharpMethodName),
                [LanguageSpecificComponent.OperatorName] = typeof(CSharpOperatorName),
                [LanguageSpecificComponent.ParameterName] = typeof(CSharpParameterName),
                [LanguageSpecificComponent.PropertyName] = typeof(CSharpPropertyName),
                [LanguageSpecificComponent.TypeDeclarationName] = typeof(CSharpTypeDeclarationName),
                [LanguageSpecificComponent.TypeParameterName] = typeof(CSharpTypeParameterName),
                [LanguageSpecificComponent.TypeParametersConstraintsSection] = typeof(CSharpTypeParametersConstraintsSection),
                [LanguageSpecificComponent.GenericTypeLink] = typeof(CSharpGenericTypeLink)
            };

    Dictionary<LanguageSpecificComponent, Type> todoComponents = new()
            {
                [LanguageSpecificComponent.AttributeName] = typeof(TodoAttributeName),
                [LanguageSpecificComponent.ConstructorName] = typeof(TodoConstructorName),
                [LanguageSpecificComponent.DelegateMethodName] = typeof(TodoDelegateMethodName),
                [LanguageSpecificComponent.EnumMemberName] = typeof(TodoEnumMemberName),
                [LanguageSpecificComponent.EventName] = typeof(TodoEventName),
                [LanguageSpecificComponent.FieldName] = typeof(TodoFieldName),
                [LanguageSpecificComponent.IndexerName] = typeof(TodoIndexerName),
                [LanguageSpecificComponent.MethodName] = typeof(TodoMethodName),
                [LanguageSpecificComponent.OperatorName] = typeof(TodoOperatorName),
                [LanguageSpecificComponent.ParameterName] = typeof(TodoParameterName),
                [LanguageSpecificComponent.PropertyName] = typeof(TodoPropertyName),
                [LanguageSpecificComponent.TypeDeclarationName] = typeof(TodoTypeDeclarationName),
                [LanguageSpecificComponent.TypeParameterName] = typeof(TodoTypeParameterName),
                [LanguageSpecificComponent.TypeParametersConstraintsSection] = typeof(TodoTypeParametersConstraintsSection),
                [LanguageSpecificComponent.GenericTypeLink] = typeof(TodoGenericTypeLink)
            };

    Dictionary<string, Dictionary<LanguageSpecificComponent, Type>> languageComponents = new()
            {
                ["csharp-lang"] = csharpComponents,
                ["other-lang"] = todoComponents
            };

    var parameterName = templateParameterNames[Type];
    var templateParameters = new Dictionary<string, object> { [parameterName] = Parameter };
}

@foreach (var lang in Languages)
{
    <span class="@lang.Id">
        <DynamicComponent Type="@languageComponents[lang.Id][Type]" Parameters="@templateParameters" />
    </span>
}
