@model RefDocGen.TemplateGenerators.Default.TemplateModels.ClassTemplateModel

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>
        @Model.Name
    </title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">


    <!-- Custom CSS, TODO: move to separate file -->
    <style>
        .display-1 {
            font-size: 4rem;
        }

        .display-2 {
            font-size: 3.5rem;
        }

        .display-3 {
            font-size: 3rem;
        }

        .display-4 {
            font-size: 2.5rem;
        }

        .display-5 {
            font-size: 2rem;
        }

        .display-6 {
            font-size: 1.5rem;
        }
    </style>
</head>

<body>
    <div class="container my-4">
        <h1 class="display-3">
            <samp>
                <span class="text-primary">class</span>
                <span class="text-dark">@Model.Name</span>
            </samp>
        </h1>

        <p class="text-muted">
            <i>@Model.DocComment</i>
        </p>

        <hr />

        <h2 class="display-5">Fields</h2>
        <div class="row">
            <div class="col-md-12">
                @foreach (var field in Model.Fields)
                {
                    <div class="border p-2 mb-2">
                        <h6 class="mb-1">
                            <samp>
                                <span class="text-primary">
                                    @string.Join(' ', field.Modifiers)
                                </span>
                                <span class="text-secondary">
                                    @field.Type
                                </span>
                                <span class="text-dark">
                                    @field.Name
                                </span>
                            </samp>
                        </h6>
                        <p class="text-muted mb-0">
                            <i>@field.DocComment</i>
                        </p>
                    </div>
                }
            </div>
        </div>

        <h2 class="display-5">Properties</h2>
        <div class="row">
            <div class="col-md-12">
                @foreach (var property in Model.Properties)
                {
                    <div class="border p-2 mb-2">
                        <h6 class="mb-1">
                            <samp>
                                <span class="text-primary">
                                    @string.Join(' ', property.Modifiers)
                                </span>
                                <span class="text-secondary">
                                    @property.Type
                                </span>
                                <span class="text-dark">
                                    @property.Name
                                </span>

                                <span class="text-secondary">{ </span>

                                @{
                                    var getterWithModifiers = property.HasGetter ? $"{string.Join(' ', property.GetterModifiers)} get" : string.Empty;
                                    var setterWithModifiers = property.HasSetter ? $"{string.Join(' ', property.SetterModifiers)} set" : string.Empty;
                                }

                                @if (property.HasGetter)
                                {
                                    <span class="text-primary">
                                        @getterWithModifiers<span class="text-secondary">;</span>
                                    </span>
                                }
                                @if (property.HasSetter)
                                {
                                    <span class="text-primary">
                                        @setterWithModifiers<span class="text-secondary">;</span>
                                    </span>
                                }

                                <span class="text-secondary">}</span>
                            </samp>
                        </h6>
                        <p class="text-muted mb-0">
                            <i>@property.DocComment</i>
                        </p>
                        <ul class="list-inline mb-0">
                        </ul>
                    </div>
                }
            </div>
        </div>

        <h2 class="display-5">Methods</h2>
        <div class="row">
            <div class="col-md-12">
                @foreach (var method in Model.Methods)
                {
                    <div class="border p-2 mb-2">
                        <h6 class="mb-1">
                            <samp>
                                <span class="text-primary">
                                    @string.Join(' ', method.Modifiers)
                                </span>
                                <span class="text-secondary">
                                    @method.ReturnType
                                </span>
                                <span class="text-secondary">
                                    @if (method.Parameters.Any())
                                    {
                                        <span class="text-dark">@method.Name<span class="text-secondary">(</span></span>

                                        @foreach (var p in method.Parameters)
                                        {
                                            <span class="text-secondary">
                                                @p.Type
                                            </span>
                                            <span class="text-dark">
                                                @p.Name
                                            </span>
                                            <span>, </span>
                                        }
                                        <text>)</text>
                                    }
                                    else
                                    {
                                        <span class="text-dark">@method.Name<span class="text-secondary">()</span></span>
                                    }
                                </span>
                            </samp>

                        </h6>
                        <p class="text-muted mb-0">
                            <i>@method.DocComment</i>
                        </p>

                        @if (method.Parameters.Any())
                        {
                            <h3 class="lead my-2">Parameters</h3>
                            <div class="mx-2">
                                @foreach (var parameter in method.Parameters)
                                {
                                    <samp>
                                        <span class="text-primary">
                                            @string.Join(' ', parameter.Modifiers)
                                        </span>
                                        <span class="text-secondary">
                                            @parameter.Type
                                        </span>
                                        <span class="text-dark">
                                            @parameter.Name
                                        </span>
                                    </samp>
                                    <p class="text-muted">
                                        <i>@parameter.DocComment</i>
                                    </p>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>
</html>
