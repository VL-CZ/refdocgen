@using RefDocGen.TemplateGenerators.Shared.TemplateModels.Menu
@inherits ComponentBase

@code {
    [Parameter]
    public required ObjectTypeTM Model { get; set; }

    [Parameter]
    public required TopMenuDataTM TopMenuData { get; set; }

    [Parameter]
    public required string[]? Versions { get; set; }

    [Parameter]
    public required Dictionary<Language, LanguageTM> Languages { get; set; }

    /// <summary>
    /// Checks if the model has any additional (remarks, type parameters, etc.) doc comments other than 'summary'.
    /// </summary>
    /// <returns>Boolean indicating whether the model is documented.</returns>
    private bool HasAdditionalDocs()
    {
        return Model.TypeParameters.Any() || Model.Attributes.Any() || Model.NestedTypes.Any() || Model.RemarksDocComment is not null || Model.SeeAlsoDocComments.Any();
    }
}

<CascadingValue Value="TopMenuData">
    <CascadingValue Value="Versions">
        <CascadingValue Value="Languages">
            <LayoutView Layout="typeof(AppLayout)">
                <div data-id="declared-type-data">
                    <DeclaredTypeName TypeName="@Model.Name" Modifiers="@Model.Modifiers" TypeParameters="@Model.TypeParameters" />

                    <TypeParametersConstraintsSection TypeParameters="@Model.TypeParameters" />

                    <AssemblyLink Assembly="@Model.Assembly" />

                    <NamespaceLink Namespace="@Model.Namespace" />

                    <BaseTypeSection BaseType="@Model.BaseType" />

                    <ImplementedInterfacesSection ImplementedInterfaces="@Model.ImplementedInterfaces" />

                    <DeclaringTypeSection DeclaringType="@Model.DeclaringType" />

                    <hr />

                    <!-- Doc comments -->
                    <SummaryDoc DocComment="@Model.SummaryDocComment" />

                    @if (!String.IsNullOrEmpty(Model.SummaryDocComment))
                    {
                        <hr />
                    }

                    <!-- Type parameter doc comments -->
                    <TypeParameterDocs TypeParameters="@Model.TypeParameters" />

                    <AttributesSection Attributes="@Model.Attributes" />

                    <NestedTypesSection NestedTypes="@Model.NestedTypes" />

                    <!-- Remarks doc comment -->
                    <RemarksDoc DocComment="@Model.RemarksDocComment" />

                    <SeeAlsoDocs DocComments="@Model.SeeAlsoDocComments" />

                    @if (HasAdditionalDocs())
                    {
                        <hr />
                    }
                </div>

                @if (Model.Constructors.Any())
                {
                    <ConstructorsSection Constructors="@Model.Constructors" TypeName="@Model.Name" />
                }

                @if (Model.Fields.Any())
                {
                    <FieldsSection Fields="@Model.Fields" />
                }

                @if (Model.Events.Any())
                {
                    <EventsSection Events="@Model.Events" />
                }

                @if (Model.Properties.Any())
                {
                    <PropertiesSection Properties="@Model.Properties" />
                }

                @if (Model.Indexers.Any())
                {
                    <IndexersSection Indexers="@Model.Indexers" />
                }

                @if (Model.Methods.Any())
                {
                    <MethodsSection Methods="@Model.Methods" SectionName="Methods" />
                }

                @if (Model.Operators.Any())
                {
                    <MethodsSection Methods="@Model.Operators" SectionName="Operators" />
                }
            </LayoutView>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>
