@using RefDocGen.TemplateProcessors.Shared.TemplateModels.Language
@using RefDocGen.TemplateProcessors.Shared.TemplateTools
@inherits LayoutComponentBase

@code {
    [CascadingParameter]
    public string? CustomStyles { get; set; } = null;

    [CascadingParameter]
    public string[]? Versions { get; set; } = [];

    [CascadingParameter]
    public required LanguageTM[] Languages { get; set; }

    [CascadingParameter]
    public int NestingLevel { get; set; } = 1;
}

<!DOCTYPE html>
<html lang="en">

@{
    string stylesUrl = UrlHelper.GetRelativeUrl("Static/styles.css", NestingLevel);
    string customJsUrl = UrlHelper.GetRelativeUrl("Static/script.js", NestingLevel);
    string boostrapJsUrl = UrlHelper.GetRelativeUrl("Static/bootstrap-5.3.5-dist.bundle.min.js", NestingLevel);
}

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Reference documentation</title>

    <script>

        // use IIFE in order to avoid polluting global context with functions & variables
        // https://developer.mozilla.org/en-US/docs/Glossary/IIFE
        (function() {
            const isLocalFile = location.protocol === "file:";
            const defaultTheme = "dark";
            const defaultLang = "csharp-lang";

            if(isLocalFile){
                const urlParams = new URLSearchParams(window.location.search);

                let redirect = false;

                // set 'theme' URL param if not found
                if(!urlParams.has("theme")){
                    urlParams.set("theme", defaultTheme);
                    redirect = true;
                }

                // set 'lang' URL param if not found
                if(!urlParams.has("lang")){
                    urlParams.set("lang", defaultLang);
                    redirect = true;
                }

                // redirect, if some of the URL parameters are missing
                if(redirect){
                    const newUrl = new URL(window.location.href);
                    newUrl.search = urlParams.toString();

                    window.location.href = newUrl;
                }
                else {
                    document.documentElement.setAttribute("data-bs-theme", urlParams.get("theme")); // set the 'data-bs-theme' attribute
                    document.documentElement.setAttribute("data-language", urlParams.get("lang")); // set the 'data-language' attribute
                }
            }
            else { // no local file -> use localStorage
                if (!localStorage.getItem("refdocgen-theme")) {
                    localStorage.setItem("refdocgen-theme", defaultTheme);
                }

                if (!localStorage.getItem("refdocgen-language")) {
                    localStorage.setItem("refdocgen-language", defaultLang);
                }

                document.documentElement.setAttribute("data-bs-theme", localStorage.getItem("refdocgen-theme")); // set the 'data-bs-theme' attribute
                document.documentElement.setAttribute("data-language", localStorage.getItem("refdocgen-language")); // set the 'data-language' attribute
            }
        })();
    </script>

    <!-- Global CSS (Bootstrap + custom styles) -->
    <link href="@stylesUrl" rel="stylesheet" />

    @if (CustomStyles is not null)
    {
        string customStylesUrl = UrlHelper.GetRelativeUrl(CustomStyles, NestingLevel);

        <!-- Custom CSS for static pages -->
        <link href="@customStylesUrl" rel="stylesheet" />
    }

    @{
        string GetCssRule(LanguageTM lang) // build the CSS rule "html[data-language=XX] [data-language=XX] { display: inline !important }"
        {
            return $"html[data-language=\"{lang.Id}\"] [data-language=\"{lang.Id}\"] {{ display: inline !important; }}\n" ;
        }
    }

    <style>
        @foreach (var lang in Languages)
        {
            @((MarkupString)GetCssRule(lang))
        }
    </style>

</head>

<body>
    <TopMenu NestingLevel="@NestingLevel" />

    <div class="container my-4" data-id="page-body">
        @Body
    </div>

    @if (Versions is not null)
    {
        <BottomMenu Versions="@Versions" />
    }

    <!-- Bootstrap JS -->
    <script src="@boostrapJsUrl"></script>

    <!-- Custom JS -->
    <script src="@customJsUrl"></script>

</body>
</html>
