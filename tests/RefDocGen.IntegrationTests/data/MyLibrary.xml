<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyLibrary</name>
    </assembly>
    <members>
        <member name="T:MyLibrary.Animal">
            <summary>
            Abstract class representing an animal.
            </summary>
            <remarks>
            This class is abstract, use inheritance.
            </remarks>
        </member>
        <member name="F:MyLibrary.Animal.weight">
            <summary>
            Animal weight.
            
            Note that this also applies for <see cref="T:MyLibrary.Dog"/>.
            <br/>
            
            See also <see cref="F:MyLibrary.User.username"/>
            <br/>
            
            See also <see cref="M:MyLibrary.Tools.Collections.MyCollection`1.Add(`0)"/>
            <br/>
            
            See also <see cref="P:MyLibrary.Tools.Collections.MyCollection`1.IsReadOnly"/>
            </summary>
            <remarks>
            The weight is in kilograms (kg).
            </remarks>
        </member>
        <member name="P:MyLibrary.Animal.Owner">
            <summary>
            Dog's owner; NULL if the dog doesn't have any owner.
            </summary>
            <exception cref="T:System.NullReferenceException">User not found.</exception>.
            <exception cref="T:System.InvalidOperationException">Blah blah blah.</exception>.
        </member>
        <member name="M:MyLibrary.Animal.GetSound">
            <summary>
            Abstract method to get the animal's sound.
            </summary>
        </member>
        <member name="M:MyLibrary.Animal.GetAverageLifespan(System.String)">
            <summary>
            Static method returning the average lifespan of an animal.
            </summary>
            <param name="species">The species of the animal.</param>
            <returns>The average lifespan.</returns>
        </member>
        <member name="M:MyLibrary.Animal.GenerateAnimalProfile(System.String,System.String,System.DateTime)">
            <summary>
            A virtual method to generate an animal profile.
            </summary>
            <param name="name">Animal's name.</param>
            <param name="habitat">Animal's habitat.</param>
            <param name="dateOfBirth">Animal's birthdate.</param>
            <returns>Profile of the animal as a string.</returns>
        </member>
        <member name="T:MyLibrary.CyclicDoc.Cycle1">
            <inheritdoc cref="T:MyLibrary.CyclicDoc.Cycle2"/>
        </member>
        <member name="T:MyLibrary.CyclicDoc.Cycle2">
            <inheritdoc cref="T:MyLibrary.CyclicDoc.Cycle1"/>
        </member>
        <member name="T:MyLibrary.CyclicDoc.CycleReference">
            <inheritdoc cref="T:MyLibrary.CyclicDoc.Cycle1"/>
        </member>
        <member name="T:MyLibrary.Dog">
            <summary>
            Represents a dog; i.e. a specific type of animal.
            </summary>
            <seealso cref="T:MyLibrary.Animal"/>
        </member>
        <member name="F:MyLibrary.Dog.AverageWeight">
            <summary>
            Average weight of the dog in kg.
            </summary>
        </member>
        <member name="P:MyLibrary.Dog.Breed">
            <summary>
            Dog's breed.
            </summary>
        </member>
        <member name="M:MyLibrary.Dog.GetSound">
            <summary>
            Override the GetSound method to return the dog's sound.
            </summary>
            <returns>The dog's sound.</returns>
        </member>
        <member name="M:MyLibrary.Dog.GenerateAnimalProfile(System.String,System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:MyLibrary.Dog.GenerateAnimalProfile(System.String,System.String,System.DateTime,System.String[])">
            <inheritdoc cref="M:MyLibrary.Animal.GetAverageLifespan(System.String)" path="/returns"/>
            <inheritdoc cref="M:MyLibrary.Animal.GenerateAnimalProfile(System.String,System.String,System.DateTime)" path="//summary"/>
        </member>
        <member name="M:MyLibrary.Dog.BarkAsync">
            <summary>
            Asynchronous method for barking.
            </summary>
        </member>
        <member name="T:MyLibrary.Hierarchy.IChild">
            <summary>
            IChild interface.
            </summary>
        </member>
        <member name="M:MyLibrary.Hierarchy.IChild.Print(System.Object)">
            <summary>
            IChild Print the object.
            </summary>
            <param name="obj">Object to print.</param>
        </member>
        <member name="T:MyLibrary.Hierarchy.Parent">
            <summary>
            Parent class.
            </summary>
        </member>
        <member name="M:MyLibrary.Hierarchy.Parent.Handle(System.Object)">
            <summary>
            Handle the object.
            </summary>
            <param name="obj">The object to handle.</param>
            <returns>Boolean indicating whether the handling was successful.</returns>
        </member>
        <member name="T:MyLibrary.Hierarchy.Child">
            <inheritdoc/>
        </member>
        <member name="M:MyLibrary.Hierarchy.Child.Handle(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MyLibrary.Hierarchy.Child.Print(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:MyLibrary.Hierarchy.ChildChild">
            <inheritdoc cref="M:MyLibrary.Hierarchy.IChild.Print(System.Object)"/>
        </member>
        <member name="M:MyLibrary.Hierarchy.ChildChild.Handle(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MyLibrary.Hierarchy.ChildChild.Print(System.Object)">
            <summary>
            ChildChild Print
            </summary>
            <param name="obj">
              <inheritdoc path="/param[@name='obj']"/>
            </param>
            <remarks>
            <inheritdoc/>
            </remarks>
        </member>
        <member name="M:MyLibrary.Hierarchy.ChildChild.PrintData">
            <inheritdoc cref="M:MyLibrary.Hierarchy.IChild.Print(System.Object)"/>
        </member>
        <member name="T:MyLibrary.Hierarchy.ChildChildChild">
            <summary>
            Before parent.
            <inheritdoc cref="T:MyLibrary.Hierarchy.Parent"/> 
            After parent.
            </summary>
        </member>
        <member name="M:MyLibrary.Hierarchy.ChildChildChild.Print(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:MyLibrary.Tools.Collections.IMyCollection`1">
            <summary>
            My collection interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyLibrary.Tools.Collections.IMyCollection`1.Execute(System.Func{`0,`0})">
            <summary>
            Execute the given operation on each element.
            </summary>
            <param name="operation">An operation to execute.</param>
        </member>
        <member name="M:MyLibrary.Tools.Collections.IMyCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add range of items into the collection.
            </summary>
            <param name="range">Range of items to add.</param>
        </member>
        <member name="M:MyLibrary.Tools.Collections.IMyCollection`1.CanAdd">
            <summary>
            Checks if an item can be added into the collection.
            </summary>
        </member>
        <member name="T:MyLibrary.Tools.Collections.IMyDictionary`2">
            <summary>
            Interface representing a custom dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:MyLibrary.Tools.Collections.IMyDictionary`2.Add(`0,`1)">
            <summary>
            Add a key-value pair into the dictionary.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:MyLibrary.Tools.Collections.IMyDictionary`2.Get(`0)">
            <summary>
            Get the value by its key.
            </summary>
            <param name="key">Key.</param>
            <returns>Value with the given key.</returns>
        </member>
        <member name="T:MyLibrary.Tools.Collections.MyCollection`1">
            <summary>
            Represents a custom collection containing the items of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="T:MyLibrary.Tools.Collections.MyCollection`1.Status">
            <summary>
            Status of the collection.
            </summary>
        </member>
        <member name="F:MyLibrary.Tools.Collections.MyCollection`1.Status.Empty">
            <summary>
            Empty collection.
            </summary>
        </member>
        <member name="F:MyLibrary.Tools.Collections.MyCollection`1.Status.NonEmpty">
            <summary>
            Non-empty collection.
            </summary>
        </member>
        <member name="T:MyLibrary.Tools.Collections.MyCollection`1.GenericEnumerator`1">
            <summary>
            Generic collection enumerator.
            </summary>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.GenericEnumerator`1.Handle(`0,`1)">
            <summary>
            TODO
            </summary>
            <param name="item"></param>
            <param name="another"></param>
        </member>
        <member name="T:MyLibrary.Tools.Collections.MyCollection`1.MyCollectionEnumerator">
            <summary>
            Custom collection enumerator.
            </summary>
        </member>
        <member name="P:MyLibrary.Tools.Collections.MyCollection`1.MyCollectionEnumerator.Current">
            <summary>
            Gets the current object.
            </summary>
        </member>
        <member name="P:MyLibrary.Tools.Collections.MyCollection`1.MyCollectionEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc cref="P:MyLibrary.Tools.Collections.MyCollection`1.MyCollectionEnumerator.Current"/>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.MyCollectionEnumerator.MoveNext">
            <summary>
            Moves to the next element.
            </summary>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.MyCollectionEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="P:MyLibrary.Tools.Collections.MyCollection`1.Count">
            <summary>
            Gets the number of elements contained in the collection. <typeparamref name="T"/>
            </summary>
        </member>
        <member name="P:MyLibrary.Tools.Collections.MyCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>Indicates whether the collection is read-only.</value>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.ArgumentNullException">If the argument is null.</exception>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.Enumerate">
            <summary>
            Enumerate the given collection
            </summary>
            <returns>Tuple containing (index, item)</returns>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.Contains(`0)">
            <summary>
        Determines whether the collection contains a specific item.
      </summary><param name="item">The item to locate in the collection.</param><returns>
        <c>true</c> if the item is found; otherwise, <c>false</c>.
      </returns>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a specific array index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.Execute(System.Func{`0,`0})">
            <inheritdoc/>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.AddGeneric``1(``0)">
            <summary>
            Add a generic item into the collection.
            </summary>
            <typeparam name="T2">Type of the item to add.</typeparam>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns><c>true</c> if the item was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyCollection`1.MyLibrary#Tools#Collections#IMyCollection{T}#CanAdd">
            <inheritdoc/>
        </member>
        <member name="P:MyLibrary.Tools.Collections.MyCollection`1.Item(System.Int32)">
            <summary>
            Return an item at the given index.
            </summary>
            <param name="index">An item index.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="P:MyLibrary.Tools.Collections.MyCollection`1.Item(System.Index)">
            <summary>
            Return an item at the given index.
            </summary>
            <param name="index">An Index struct.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="T:MyLibrary.Tools.Collections.MyDictionary`2">
            <summary>
            A simple custom dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyDictionary`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyDictionary`2.Get(`0)">
            <inheritdoc/>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MySortedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="T:MyLibrary.Tools.Collections.MyStringCollection">
            <summary>
            Custom string collection.
            </summary>
            <seealso cref="T:MyLibrary.Tools.Collections.MyCollection`1">My collection class</seealso>
            <seealso cref="T:System.Collections.Generic.ICollection`1"/>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyStringCollection.Add(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MyLibrary.Tools.Collections.MyStringCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:MyLibrary.Tools.Collections.INonGenericCollection">
            <summary>
            Non generic collection interface.
            </summary>
        </member>
        <member name="T:MyLibrary.Tools.Collections.NonGenericCollection">
            <summary>
            Non generic collection class.
            </summary>
        </member>
        <member name="P:MyLibrary.Tools.Collections.NonGenericCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether the collection is thread-safe (synchronized) or not.
            </summary>
        </member>
        <member name="M:MyLibrary.Tools.Collections.NonGenericCollection.Get``1(System.Int32)">
            <summary>
            Get the item at the given index.
            </summary>
            <typeparam name="T">Type of the item.</typeparam>
            <param name="index">Index of the item.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="M:MyLibrary.Tools.Collections.NonGenericCollection.Add``1(``0)">
            <summary>
            Add a new item.
            </summary>
            <typeparam name="T">Type of the item.</typeparam>
            <param name="item">The item to add.</param>
        </member>
        <member name="T:MyLibrary.Tools.Point">
            <summary>
            Struct representing a point.
            </summary>
        </member>
        <member name="F:MyLibrary.Tools.Point.X">
            <summary>
            X coordinate of the point.
            </summary>
        </member>
        <member name="F:MyLibrary.Tools.Point.Y">
            <summary>
            Y coordinate of the point.
            </summary>
        </member>
        <member name="M:MyLibrary.Tools.Point.#ctor(System.Double,System.Double)">
            <summary>
            Create new point.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:MyLibrary.Tools.Point.Equals(System.Object)">
            <summary>
            Checks if the 2 points are equal.
            </summary>
            <param name="obj">Another point.</param>
            <returns>Are the 2 points are equal?</returns>
        </member>
        <member name="M:MyLibrary.Tools.Point.op_Equality(MyLibrary.Tools.Point,MyLibrary.Tools.Point)">
            <summary>
            Compare the 2 points.
            </summary>
            <param name="point">1st point.</param>
            <param name="other">2nd point.</param>
            <returns>Are the 2 points equal?</returns>
        </member>
        <member name="M:MyLibrary.Tools.Point.op_Inequality(MyLibrary.Tools.Point,MyLibrary.Tools.Point)">
            <inheritdoc cref="M:MyLibrary.Tools.Point.op_Equality(MyLibrary.Tools.Point,MyLibrary.Tools.Point)" />
        </member>
        <member name="M:MyLibrary.Tools.Point.op_UnaryNegation(MyLibrary.Tools.Point)">
            <summary>
            Negate the point coordinates.
            </summary>
            <param name="point">The provided point.</param>
            <returns>A point with negated coordinates.</returns>
        </member>
        <member name="M:MyLibrary.Tools.Point.op_Explicit(MyLibrary.Tools.Point)~System.Numerics.Vector2">
            <summary>
            Converts the point into a vector.
            </summary>
            <param name="point">Point to convert</param>
            <returns>2D vector.</returns>
        </member>
        <member name="M:MyLibrary.Tools.Point.op_Implicit(System.Numerics.Vector2)~MyLibrary.Tools.Point">
            <summary>
            Converts the <see cref="T:System.Numerics.Vector2"/> into a <see cref="T:MyLibrary.Tools.Point"/>.
            </summary>
            <param name="vector">Vector to convert.</param>
            <returns>A point.</returns>
        </member>
        <member name="T:MyLibrary.Tools.ObjectPredicate">
            <summary>
            Predicate about an object.
            </summary>
            <param name="obj">The provided object.</param>
            <returns>True or false.</returns>
        </member>
        <member name="T:MyLibrary.Tools.MyPredicate`1">
            <summary>
            Predicate about a generic type T.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The provided object.</param>
            <returns>True or false.</returns>
        </member>
        <member name="T:MyLibrary.Tools.Season">
            <summary>
            Represents season of a year.
            </summary>
        </member>
        <member name="F:MyLibrary.Tools.Season.Spring">
            <summary>
            Represents spring.
            </summary>
        </member>
        <member name="F:MyLibrary.Tools.Season.Summer">
            <summary>
            Represents summer.
            </summary>
        </member>
        <member name="F:MyLibrary.Tools.Season.Autumn">
            <summary>
            Represents autumn.
            </summary>
        </member>
        <member name="F:MyLibrary.Tools.Season.Winter">
            <summary>
            Represents winter.
            </summary>
        </member>
        <member name="T:MyLibrary.Tools.StringExtensions">
            <summary>
            Extension class for <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="M:MyLibrary.Tools.StringExtensions.ZipWith(System.String,System.String)">
            <summary>
            Zips the two provided strings.
            </summary>
            <param name="s1">The first string.</param>
            <param name="s2">The second string.</param>
            <returns>A zipped string.</returns>
            <seealso cref="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)"/>
        </member>
        <member name="T:MyLibrary.Tools.ICovariant`1">
            <summary>
            An interface with a covariant type.
            </summary>
            <typeparam name="T">Covariant type</typeparam>
        </member>
        <member name="T:MyLibrary.Tools.IContravariant`1">
            <summary>
            An interface with a contravariant type.
            </summary>
            <typeparam name="T">Contravariant type</typeparam>
        </member>
        <member name="T:MyLibrary.Tools.WeatherStation">
            <summary>
            Weather station class
            </summary>
        </member>
        <member name="F:MyLibrary.Tools.WeatherStation.location">
            <summary>
            Location of the weather station
            </summary>
        </member>
        <member name="M:MyLibrary.Tools.WeatherStation.#ctor(MyLibrary.Tools.Point)">
            <summary>
            Weather station constructor
            </summary>
            <param name="location">Location of the weather station.</param>
        </member>
        <member name="E:MyLibrary.Tools.WeatherStation.OnTemperatureChange">
            <summary>
            Temperature change event.
            </summary>
            <seealso cref="T:System.Action"/>
            <seealso cref="T:System.Action`2"/>
        </member>
        <member name="T:MyLibrary.User">
            <summary>
            Class representing an user of our app.
            </summary>
        </member>
        <member name="F:MyLibrary.User.MaxAge">
            <summary>
            Maximum age of the user.
            </summary>
        </member>
        <member name="F:MyLibrary.User.username">
            <summary>
            Name of the user. <c>var name = user.username</c>
            
            <code>
            var name = user.username;
            var userValidator = new UserValidator();
            
            var isValid = userValidator.Validate(name);
            Console.WriteLine($"Valid: {isValid}");
            </code>
            <para>
            Paragraph
            </para>
            <list type="bullet">
              <item>ABC</item>
              <item>
                <term>ddd</term> 
                <description>DEF</description>
              </item>
            </list>
            <list type="number">
              <item>First</item>
              <item>Second</item>
            </list>
            
            <list type="table">
            <listheader>
            <term>name</term>
            <term>age</term>
            </listheader>
            <item>
            <term>John Smith</term>
            <description>10</description>
            </item>
            <item>
            <term>Jane Anderson</term>
            <description>15</description>
            </item>
            </list>
            <see href="http://www.google.com">Google</see> <see langword="true"/>
            </summary>
            <seealso href="http://www.google.com"/>
            <seealso cref="F:MyLibrary.User.MaxAge">max age constant</seealso>
            <seealso cref="P:System.Reflection.FieldInfo.IsLiteral" />
            <seealso cref="T:MyLibrary.Tools.Point"/>
            <seealso cref="!:notFound"/>
        </member>
        <member name="M:MyLibrary.User.#ctor">
            <summary>
            Default constructor.
            </summary>  
        </member>
        <member name="M:MyLibrary.User.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new user using the provided <paramref name="username"/> and <paramref name="age"/>.
            </summary>
            <param name="username">The name of the user.</param>
            <param name="age">Age of the user.</param>
        </member>
        <member name="P:MyLibrary.User.Age">
            <summary>
            Gets the age of the user (nullable).
            </summary>
            <value>The age of the user.</value>
        </member>
        <member name="P:MyLibrary.User.FirstName">
            <summary>
            First name of the user.
            </summary>
        </member>
        <member name="P:MyLibrary.User.LastName">
            <summary>
            Last name of the user.
            </summary>
        </member>
        <member name="P:MyLibrary.User.Animals">
            <summary>
            List of owned animals.
            </summary>
        </member>
        <member name="M:MyLibrary.User.IsAdult">
            <summary>
            Checks if the user is adult.
            </summary>
            <returns>True if adult, false otherwise.</returns>
        </member>
        <member name="M:MyLibrary.User.AddAnimals(MyLibrary.Animal[])">
            <summary>
            Add animals to the user.
            </summary>
            <param name="animals">Animals to add.</param>
        </member>
        <member name="M:MyLibrary.User.ProcessValues(System.Int32@,System.Int32@,System.String,System.Int32@,System.Double)">
            <summary>
            A method with ref, in, and out parameters for testing purposes.
            </summary>
            <param name="inValue">An input value.</param>
            <param name="refValue">A reference value.</param>
            <param name="outValue">An output value.</param>
        </member>
        <member name="M:MyLibrary.User.PrintProfile">
            <summary>
            Print user's profile.
            </summary>
        </member>
        <member name="M:MyLibrary.User.PrintProfile(System.String)">
            <summary>
            Print user's profile in the given format
            </summary>
            <param name="format">Format used for printing the profile.</param>
        </member>
        <member name="M:MyLibrary.User.PrintProfile(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Print user's profile in the given format
            </summary>
            <param name="format">Format used for printing the profile.</param>
            <param name="keywords">List of keywords.</param>
        </member>
        <member name="M:MyLibrary.User.GetAnimalsByType">
            <summary>
            Get dictionary of animals, whose keys are animal type and values are the animals of given type.
            </summary>
            <returns>Dictionary of animals, indexed by their type.</returns>
        </member>
        <member name="M:MyLibrary.User.AddAnimalsByType(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{MyLibrary.Animal}})">
            <summary>
            Make the animals user-owned.
            </summary>
            <param name="animals">Animals to add. Key: animal type, Value: list of animals of the given type.</param>
        </member>
    </members>
</doc>
