@using RefDocGen.TemplateProcessors.Shared.TemplateModels.Language
@using RefDocGen.TemplateProcessors.Shared.TemplateTools

@inherits ComponentBase

@code {

    [Parameter]
    public required object Parameter { get; set; }

    [Parameter]
    public required LanguageSpecificComponent Type { get; set; }

    [CascadingParameter]
    public required LanguageTM[] Languages { get; set; }

    private Dictionary<LanguageSpecificComponent, string> templateParameterNames = new()
    {
        [LanguageSpecificComponent.AttributeDeclaration] = "Attribute",
        [LanguageSpecificComponent.ConstructorDeclaration] = "Constructor",
        [LanguageSpecificComponent.DelegateMethodDeclaration] = "Delegate",
        [LanguageSpecificComponent.EnumMemberDeclaration] = "EnumMember",
        [LanguageSpecificComponent.EventDeclaration] = "Event",
        [LanguageSpecificComponent.FieldDeclaration] = "Field",
        [LanguageSpecificComponent.IndexerDeclaration] = "Indexer",
        [LanguageSpecificComponent.MethodDeclaration] = "Method",
        [LanguageSpecificComponent.OperatorDeclaration] = "Operator",
        [LanguageSpecificComponent.ParameterDeclaration] = "Parameter",
        [LanguageSpecificComponent.PropertyDeclaration] = "Property",
        [LanguageSpecificComponent.TypeDeclaration] = "Type",
        [LanguageSpecificComponent.TypeParameterDeclaration] = "TypeParameter",
        [LanguageSpecificComponent.TypeParameterConstraints] = "TypeParameter",
        [LanguageSpecificComponent.GenericTypeLink] = "Type",
    };
}

@{
    var parameterName = templateParameterNames[Type];
    var templateParameters = new Dictionary<string, object> { [parameterName] = Parameter };
}

@foreach (var lang in Languages)
{
    <span class="not-visible" data-language="@lang.Id">
        @{
            var type = LanguageFragmentType.Get("CSharp", Type);
        }
        <DynamicComponent Type="@type" Parameters="@templateParameters" />
    </span>
}
